# -*- coding: utf-8 -*-
"""Hearti_Health.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Z2DlwL6v0lMd5U5j6XY7wsRJcCl-iXi

# Heart Attack Prediction

<h2> Problem Statement </h2>

Heart disease is one of the biggest causes of morbidity and mortality among the population of the world. Prediction of cardiovascular disease is regarded as one of the most important subjects in the section of clinical data analysis.
and Here we start developing the prediction model using google colab Notebook  . through this notebook we analyse the insights over data by exploratory data analysis techniques.
The Objective of the preparing notebook is to better understand and connect with the data that is features, distribution of the data and other various factors in the data that is related to disease prediction

<h2> Description </h2>

Source: https://www.kaggle.com/ronitf/heart-disease-uci          
Data: Heart.csv

<h2>1.1 Business objectives and constraints.</h2>

* No low-latency requirement.
* Interpretability is important.
* Errors can be very costly.

<h2>Data Attribute Description</h2>

<ul>
      
    
<li> age --> The person's age in years</li>
<li>sex --> The person's sex (1 = male, 0 = female)</li>
<li>cp --> The chest pain experienced (Value 1: typical angina, Value 2: atypical angina, Value 3: non-anginal pain, Value 4: asymptomatic)</li>
<li>trestbps --> The person's resting blood pressure (mm Hg on admission to the hospital)</li>
<li>chol --> The person's cholesterol measurement in mg/dl</li>
<li>fbs --> The person's fasting blood sugar (> 120 mg/dl, 1 = true; 0 = false)</li>
<li>restecg --> Resting electrocardiographic measurement (0 = normal, 1 = having ST-T wave abnormality, 2 = showing probable or definite left ventricular hypertrophy by Estes'criteria)</li>
<li>thalach --> The person's maximum heart rate achieved</li>
<li>exang --> Exercise induced angina (1 = yes; 0 = no)</li>
<li>oldpeak --> ST depression induced by exercise relative to rest ('ST' relates to positions on the ECG plot. See more here)</li>
<li>slope: the slope of the peak exercise ST segment (Value 1: upsloping, Value 2: flat, Value 3: downsloping)</li>
<li>ca --> The number of major vessels (0-3)</li>
<li>thal --> A blood disorder called thalassemia (3 = normal; 6 = fixed defect; 7 = reversable defect)</li>
<li>target --> Heart disease (0 = no, 1 = yes)</li>

</ul>

<h2>Importing Libraries</h2>
"""

import warnings
warnings.simplefilter("ignore")

# linear algebra Library
import numpy as np

# data processing, CSV file I/O (e.g. pd.read_csv)
import pandas as pd

# Plotting graphs Libraries
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()

# Saving data
# import pickle
import pickle

#Model
from sklearn.ensemble import RandomForestClassifier

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
import os

# Import tools
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import os, sys

"""<h2> Reading the data </h2>"""

df = pd.read_csv("heart.csv")
X = df.drop(['target'], axis=1).values
y = df['target'].values

df.tail()
df.fbs.value_counts()
plt.figure(figsize=(15,10))
sns.heatmap(df.corr(), annot=True,fmt='.1f')
plt.show()

"""<h2> Dividing the data into train and test </h2>"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""<h2>Training the model</h2>"""

# Initializing the model
model = RandomForestClassifier()
# Training the model
model.fit(X_train,y_train)

"""<h2> Predicting from the trained model on test data </h2>"""

y_pred = model.predict(X_test)

"""<h2>Check Accuracy</h2>

<h2>Top 5 features</h2>
"""

#Names of the features
features_name = ["age","sex","cp","trestbps","chol","fbs","restecg","thalach","exang","oldPeak","slope","ca","thal"]

#Getting important features from the model
importances = model.feature_importances_
imp = np.argsort(importances)[::-1][:5]
count = 0
for index,feature_index in enumerate(imp):
    print(str(index + 1) + '  ' + features_name[feature_index])

"""<h2> Checking for a patient</h2>"""

#["age","sex","cp","trestbps","chol","fbs","restecg","thalach","exang","oldPeak","slope","ca","thal"]

patient_data = [27,1,3,123,100,1,0,187,0,2.8,0,0,1]
data  = np.array(list(patient_data)).reshape(1, -1)

model.predict(data)
if model.predict(data)[0] ==1 :
  print("Person will get a heart attack")
else:
  print("You are safe")

"""<h2>Saving the Model</h2>"""

filename = 'finalized_model.pkl'
pickle.dump(model, open(filename, 'wb'))